#!/usr/bin/env bash
#
# ############################################################################
# Project: xSHELL (none)
# File...: init
# Created: Thursday, 2021/05/20 - 13:18:34
# Author.: @fbnmtz, fgm (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Last Modified: Monday, 2023/10/02 - 01:53:01
# Modified By..: @fbnmtz, (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Version: 0.1.18.613
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Description: 
#  >
# ############################################################################
# HISTORY:
#

# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# _INIT_DEBUG_=false      # set to true or false to DEBUG

# shellcheck disable=SC1090   #warning on 'source' usage
[ "$_INIT_DEBUG_" == 'true' ] && \
  source /opt/xSHELL/colors   #  autoload 'colors' if in DEBUG mode
  # source ~/bin/xSHELL/colors   #  autoload 'colors' if in DEBUG mode

# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
APP=$(basename "$0")          # application name
# shellcheck disable=SC2034   # unused variable warning
APP_DIR=$(dirname "$0")       # application current directory
APP_HOME=""                   # application home (store data)

declare -A _xLIB_DIRS_
_CALLER_=''
_USE_COUNT_=0
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~

# function to set $APP_HOME
# ex: setHome {dir1, dir2}
xsetHome(){
  APP_HOME=~/.fbnmtz/$APP
  mkdir -p "$APP_HOME"/"$*"
}

# import/use some library
# ex: use args utils mycustomlib
use(){
  _USE_COUNT_+=1
  # check if some lib already loaded
  checkLibLoaded(){
    local lib_const=${1^^}          # convert fist arg to UPCASE 
    lib_const=${lib_const//./_}     # replace '.' for '_'
    lib_const=${lib_const//LIB/}    # remove word 'lib' from filename 
    lib_const="_xLIB_${lib_const}"  # Const for mark lib as loaded

    # check last char (needs to be equal '_' underline) 
    [ ! "${lib_const:-1}" == "_" ]  && lib_const+="_"

    # check if load lib has a defined var _xLIB_NAME_ and its not null
    if eval "[ -z \"\$${lib_const}\" ]" ; then
      [ "$_INIT_DEBUG_" == 'true' ] && { 
        echo -e "${RED}\`-> lib '${1}' not loaded. (const "\
          "'${BGRED}${BLACK}$lib_const${RESET}${RED}' not found)${RESET}"
      }
      return 1
    else
      [ "$_INIT_DEBUG_" == 'true' ] && {
        echo -e "${YELLOW}\`-> skipping '${1}' -> Lib already loaded. ("\
          "const '${BGYELLOW}${BLACK}$lib_const${RESET}${YELLOW}' found)${RESET}"
      }
      return 0
    fi
  }

  # trackback function caller
  if [ "$_USE_COUNT_" -eq 1 ]; then 
    _CALLER_="$0" ; _LIB_=$1
  else
    [ "$_CALLER_" == "$_LIB_" ] && { 
      _CALLER_="$0";
    } || _CALLER_=$_LIB_
  fi
  
  [ "$_INIT_DEBUG_" == 'true' ] && \
    echo -e "call ${YELLOW}'use ${MAGENTA}$*${RESET}' from ${CYAN}'$_CALLER_'${RESET}"
  
  for lib_file in "$@"; do
    
    if ! checkLibLoaded "$lib_file"; then

      # shellcheck disable=SC2155         # warning - declare and assign separate
      local current_path=$(dirname "$0") 
      local lib_dirs=( 
        "/opt/xSHELL/$lib_file"
        "$HOME/bin/xSHELL/$lib_file"
        "$HOME/bin/xSHELL/vendor/$lib_file" 
        "$current_path/$lib_file" 
        "$current_path/lib/$lib_file"
        "$HOME/bin/vendor/$lib_file" 
      )
      local included=''
      
      # search file in default destinations
      local li=0
      for lib in "${lib_dirs[@]}"; do

        if source "$lib" 2> /dev/null ; then
          _CALLER_=$lib
          # success? set a flag; break loop
          [ "$_INIT_DEBUG_" == 'true' ] && { 
            echo -e "${GREEN}  \`-> loading '${lib_dirs[$li]}'${RESET} - "\
              "${CYAN}directory: $((li+1))/${#lib_dirs[@]}${RESET})"
          }
          included="true"
          
          _xLIB_DIRS_[$lib_file]="${lib}"

          break
        fi
        li=$((li+1))
      done
    else 
      included="true"
    fi

    # not included with success? raise a error 
    test -z "$included" && { 
      echo -e "\n${RED}Error importing lib '$lib_file'"\
        "- NOT_FOUND!${RESET}"
      [ "$_INIT_DEBUG_" == 'true' ] && { 
          local all_dirs=${lib_dirs[*]}
          echo -e "${RED} \`-> searched on dir's:\n   *"\
            "${all_dirs// /\\n   \* }"\
            "${RESET}"
        }
      exit 1
    }
  
  done
  _USE_COUNT_=0
}

# create some aliases for use/import libraries
alias include=use
alias import=use
alias require=use
alias load=use
alias unit=use

# validade required binaries
# ex: xrequirements bin1 bin2 bin3A:bin3B
xrequirements(){
  fail(){
    local tool=$1
    local error_msg="requirements error! please search and install a package with missing tool: '${tool//\:/\' or \'}' ."
    echo -e "$error_msg"
    notify-send "$0" "$error_msg"
    exit 10
  }
  # check if a package exists on the system
  # ex: check bin1
  check(){ which "$1" &> /dev/null; }
  
  for tool in "$@"; do
    if [[ "$tool" =~ ":" ]]; then
      local found=''
      for t in ${tool//\:/ }; do 
        if check "$t"; then
          found=true
          break;
        else
          found=false
        fi
      done
      [ "$found" != 'true' ] && fail "$tool"
    else
      if ! check "$tool"; then
        fail "$tool"
      fi
    fi
  done
}
