#!/usr/bin/env bash
#
# ############################################################################
# Project: xSHELL (none)
# File...: init
# Created: Thursday, 2021/05/20 - 13:18:34
# Author.: @fbnmtz, fgm (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Last Modified: Monday, 2023/02/13 - 23:46:55
# Modified By..: @fbnmtz, (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Version: 0.1.14.420
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Description: 
#  >
# ############################################################################
# HISTORY:
#

# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# shellcheck disable=SC1090,2155

# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# debug var
# _INIT_DEBUG_=false      # set to true or false

#  autoload 'colors' if in DEBUG mode
[ "$_INIT_DEBUG_" == 'true' ] && source ~/bin/xSHELL/colors

# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
APP=$(basename "$0")      # application name
APP_DIR=$(dirname "$0")   # application current directory
APP_HOME=""               # application home (store data)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~

# function to set $APP_HOME
# ex: setHome {dir1, dir2}
xsetHome(){
  APP_HOME=~/.fbnmtz/$APP
  mkdir -p "$APP_HOME"/"$*"
}

# import/use some library
# ex: use args utils mycustomlib
use(){
  # check if some lib already loaded
  checkLibLoaded(){
    # convert fist arg to UPCASE 
    local name=${1^^}

    # replace '.' for '_'
    name=${name//./_}
    
    # remove word 'lib' from filename (# name=$(sed "s/LIB//" <<< $name))
    name=${name//LIB/}
    
    # Const for mark lib as loaded
    lib_const="_xLIB_${name}"

    # check last char (needs to be equal '_' underline)
    if [[ ! "${lib_const:(-1)}" == "_" ]]; then
      lib_const+="_"
    fi

    # check if load lib has a defined var _xLIB_NAME_ and its not null
    if eval "test -z \"\$${lib_const}\"" ; then
      [ "$_INIT_DEBUG_" == 'true' ] && { 
        echo -en "${RED}\`-> lib '${1}' not loaded. (const "
        echo -e  "'${BGRED}${BLACK}$lib_const${RESET}${RED}' not found)${RESET}"
      }
      return 1
    else
      [ "$_INIT_DEBUG_" == 'true' ] && {
        echo -en "${YELLOW}\`-> skipping '${1}' -> Lib already loaded. ("
        echo -e  "const '${BGYELLOW}${BLACK}$lib_const${RESET}${YELLOW}' found)${RESET}"
      }
      return 0
    fi
  }

  [ "$_INIT_DEBUG_" == 'true' ] && \
    echo -e "call ${YELLOW}'use ${MAGENTA}$*${RESET}' from ${CYAN}'$0'${RESET}"
  
  for lib_file in "$@"; do
    
    if ! checkLibLoaded "$lib_file"; then

      local current_path=$(dirname "$0") 
      local locations=( 
        #  search on xSHELL directory 
        "$HOME/bin/xSHELL/$lib_file"
        # try to load third party libraries  
        "$HOME/bin/xSHELL/vendor/$lib_file" 
        # search libs on path of current script
        "$current_path/$lib_file" 
        "$current_path/lib/$lib_file"
        # search on $HOME/bin/vendor (for third party libraries)
        "$HOME/bin/vendor/$lib_file" 
      )
      local included=''

      # search file in default destinations
      li=0
      for lib in "${locations[@]}"; do

        if source "$lib" 2> /dev/null ; then
          # success? set a flag; break loop
          [ "$_INIT_DEBUG_" == 'true' ] && { 
            echo -e "${GREEN}  \`-> loading '${locations[$li]}'${RESET} - "\
              "${CYAN}location: $((li+1))/${#locations[@]}${RESET})"
          }
          included="true"
          break
        fi
        li=$((li+1))
      done
    else 
      included="true"
    fi

    # not included with success? raise a error 
    test -z "$included" && { 
      echo -e "\n${RED}Error importing lib '$lib_file'"\
        " - NOT_FOUND!${RESET}"
      [ "$_INIT_DEBUG_" == 'true' ] && { 
            echo -e "${RED} \`-> searched on locations:\n   *"\
              "$(echo ${locations[@]} | sed 's/ /\\n\   * /g')"\
              "${RESET}"
          }
      exit 1
    }
  
  done
}

# create some aliases for use/import libraries
alias include=use
alias import=use
alias require=use
alias load=use
alias unit=use

# validade requirements
# ex: xrequirements bin1 bin2 bin3A:bin3B
xrequirements(){
  fail(){
    local tool=$1
    local error_msg="requirements error! please search and install a package with missing tool: '${tool//\:/\' or \'}' ."
    echo -e "$error_msg"
    alert "$0" "$error_msg"
    exit 10
  }
  # check if a package exists on the system
  # ex: check bin1
  check(){
    which "$1" &> /dev/null
  }
  for tool in "$@"; do
    if [[ "$tool" =~ ":" ]]; then
      local found=''
      for t in ${tool//\:/ }; do 
        if check "$t"; then
          found=true
          break;
        else
          found=false
        fi
      done
      [ "$found" != 'true' ] && fail "$tool"
    else
      if ! check "$tool"; then
        fail "$tool"
      fi
    fi
  done
}
