#!/usr/bin/env bash
#
# ############################################################################
# Project: xSHELL (none)
# File...: xshell
# Created: Thursday, 2020/02/18 - 20:44:58
# Author.: @fbnmtz, (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Last Modified: Saturday, 2023/02/04 - 23:29:43
# Modified By..: @fbnmtz, (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Version: 0.1.15.300
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Description: 
#  >
# ############################################################################
# HISTORY:
#

# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~
# shellcheck disable=SC1090,SC2154
#   * SC1090: Can't follow non-constant source. Use a directive to specify location.
#       -> ignore this warning because shellcheck cant follow or source usage
#   * SC2154: var is referenced but not assigned.
#       -> ignore this warning because shellcheck cant detect variables created by or library system.
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~
source ~/bin/xSHELL/init
use args utils xshell.lib
xrequirements touch chmod date

xshell_init

# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~
# id=-m,--my-id;var=v1:value,v2+r;desc='example.of.args'
xarg --id -a,--args      --var arguments+r     --desc "define <arguments> for new script"
xarg --id -e,--editor    --var editor+r        --desc "define <editor> to open script"
xarg --id -f,--filename  --var name+r          --desc "filename for new script"
xarg --id -H,--header    --var _xHEADER_:true  --desc "enable our default header on the new script"
xarg --id -l,--lib       --var _xLIB_:true     --desc "define new script as a our LIB type (can be loaded with 'use' function)"

xrun --xreject-unknow --xrequire-one --xversionrc "$@"

if [ -n "$name" ]; then
    [ "$_xLIB_" == 'true' ] && filename="$libs_path/$name" || filename="$scripts_path/$name"
else 
    echo "Error: You must specify <filename> with -f option"
    xusage
    exit 2
fi

# exit if exist a script with this name
if [ -f "$filename" ]; then 
    echo -n "script already exists! Open it on <editor> (y/n)?: "
    read -r choice
    # convert answer to UPPERCASE
    [ "${choice^^}" == "Y" ] && $editor "$filename"
    exit 1
fi

# open a block and print everything to $filename
{ 
    # add shebang (get by env)
    echo -e "#!/usr/bin/env bash"
    
    # add default header information (if requested) 
    [ "$_xHEADER_" == 'true' ] && templateHeader || templateInfo
    
    # finally, create the new script OR library 
    [ "$_xLIB_" == 'true' ] && templateLib "$name" || templateScript 

} > "$filename"

# set executable permissions
chmod +x "$filename"

# open script on a selected editor (by user with --editor or by function getPath)
$editor "$filename" 
