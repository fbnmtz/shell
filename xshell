#!/usr/bin/env bash
#
# ############################################################################
# Project: xSHELL (none)
# File...: xshell
# Created: Thursday, 2020/02/18 - 20:44:58
# Author.: @fbnmtz, (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Last Modified: Wednesday, 2023/02/01 - 00:34:51
# Modified By..: @fbnmtz, (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Version: 0.1.12.232
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Description: 
#  >
# ############################################################################
# HISTORY:
#

# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~
# shellcheck disable=SC1090,SC2154
#   * SC1090: Can't follow non-constant source. Use a directive to specify location.
#       -> ignore this warning because shellcheck cant follow or source usage
#   * SC2154: var is referenced but not assigned.
#       -> ignore this warning because shellcheck cant detect variables created by or library system.
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~
source ~/bin/xSHELL/init
use args utils xshell.lib

xrequirements touch chmod date

# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~
# set default editor
editor=$(getPath code micro nano vim)
# scripts path
scripts_path=$HOME/bin
# libs path
libs_path=$HOME/bin/xSHELL

# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~
xarg --id -f,--filename  --var name+r         --desc "filename for new script"
xarg --id -l,--lib       --var _xLIB_:true    --desc "define new script as a LIB type"
xarg --id -H,--header    --var _xHEADER_:true --desc "enable default our header on the new script"
xarg --id -e,--editor    --var editor+r       --desc "define <editor> to open script"

xrun --xreject-unknow --xrequire-one "$@"

if [ -n "$name" ]; then
    [ "$_xLIB_" == 'true' ] && filename="$libs_path/$name" || filename="$scripts_path/$name"
fi

# exit if exist a script with this name
if [ -f "$filename" ]; then 
    echo "quiting: script already exists!" 
    exit 1
fi

# open a block and print everything to $filename
{ 
    # add shebang (get by env)
    echo -e "#!/usr/bin/env bash"
    
    # add default header information (if requested) 
    [ "$_xHEADER_" == 'true' ] && templateHeader || templateInfo
    
    # finally, create the new script OR library 
    [ "$_xLIB_" == 'true' ] && templateLib "$name" || templateScript 

} > "$filename"

# set executable permissions
chmod +x "$filename"

# open script on a selected editor (by user with --editor or by function getPath)
$editor "$filename" 
