#!/usr/bin/env bash
#
# #############################################################
# Project: bin (none)
# File...: lib/try
# Created: <unknown>, 2014/08/07 - 10:30:00
# Author.: Mathias Henze, user:3917943 (stackoverflow)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Last Modified: Friday, 2022/02/11 - 20:43:22
# Modified By..: Fabiano Matos, fgm (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Version: 0.1.2.12
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Description: 
#  > https://stackoverflow.com/questions/22009364/is-there-a-try-catch-command-in-bash
# ############################################################################
# HISTORY:
#
# #############################################################
#

__LIB_TRY=true;

export AnException=100
export AnotherException=101

function try()
{
    [[ $- = *e* ]]; SAVED_OPT_E=$?
    set +e
}

function throw()
{
    exit $1
}

function catch()
{
    export ex_code=$?
    (( $SAVED_OPT_E )) && set +e
    return $ex_code
}

function throwErrors()
{
    set -e
}

function ignoreErrors()
{
    set +e
}


# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
#  USAGE
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# # start with a try
# try
# (   # open a subshell !!!
#     echo "do something"
#     [ someErrorCondition ] && throw $AnException

#     echo "do something more"
#     executeCommandThatMightFail || throw $AnotherException

#     throwErrors # automaticatly end the try block, if command-result is non-null
#     echo "now on to something completely different"
#     executeCommandThatMightFail

#     echo "it's a wonder we came so far"
#     executeCommandThatFailsForSure || true # ignore a single failing command

#     ignoreErrors # ignore failures of commands until further notice
#     executeCommand1ThatFailsForSure
#     local result = $(executeCommand2ThatFailsForSure)
#     [ result != "expected error" ] && throw $AnException # ok, if it's not an expected error, we want to bail out!
#     executeCommand3ThatFailsForSure

#     # make sure to clear $ex_code, otherwise catch * will run
#     # echo "finished" does the trick for this example
#     echo "finished"
# )
# # directly after closing the subshell you need to connect a group to the catch using ||
# catch || {
#     # now you can handle
#     case $ex_code in
#         $AnException)
#             echo "AnException was thrown"
#         ;;
#         $AnotherException)
#             echo "AnotherException was thrown"
#         ;;
#         *)
#             echo "An unexpected exception was thrown"
#             throw $ex_code # you can rethrow the "exception" causing the script to exit if not caught
#         ;;
#     esac
# }


# another way
# { # try

#     command1 &&
#     #save your output

# } || { # catch
#     # save log for exception 
# }