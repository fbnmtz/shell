#!/usr/bin/env bash
#
# ############################################################################
# Project: bin (none)
# File...: xSHELL/xshell.lib
# Created: Sunday, 2022/02/20 - 18:44:18
# Author.: @fbnmtz, fgm (devel.fgm@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Last Modified: Sunday, 2023/01/29 - 14:39:42
# Modified By..: @fbnmtz, (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Version: 0.1.2.58
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Description: 
#  >
# ############################################################################
# HISTORY:
#
_xLIB_XSHELL_=true

# author name
[ -z "$author_name" ] && author_name=$(git config author.name)
# still null? try by $USER variable
[ -z "$author_name" ] && author_name="$USER"
# null? set as unknown, to be filled in later
[ -z "$author_name" ] && author_name='<unknow>'

# author email
[ -z "$author_mail" ] && author_mail=$(git config author.email)
# null? set as unknown, to be filled in later
[ -z "$author_mail" ] && author_mail='<unknow>'

templateHeader(){
    # get current date/time (force locale to US format on date)
    export LC_TIME=en_US.UTF-8 2>/dev/null
    today=$(date "+%A, %Y/%m/%d - %H:%M:%S")
    # print default header template
    echo -e "#
# ############################################################################
# Project: ~/bin
# File...: $APP
# Created: $today
# Author.: $author_name, ($author_mail)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Last Modified: $today
# Modified By..: $author_name, ($author_mail)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Version: 0.0.1.0
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Description: 
#  >
# ############################################################################
# HISTORY:
#"
}

templateScript(){
    echo -e "
    \n# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~\
    \n# shellcheck disable=SC1090,SC2154\
    \n# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~\
    \n\
    \n# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~\
    \n# initialize lib system\
    \nsource ~/bin/xSHELL/init\
    \n\
    \n# import/use libs\
    \nuse args \
    \n# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~\
    \n\
    \n# xrequirements cut ls\
    \n\
    \n# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~\
    \nxarg --id -p,--print   --code \"echo 'test prints'\" --desc \"print some code\"\
    \nxarg --id -s,--sum     --var expression+r          --desc \"expression to sum\" \
    \n\
    \n# pass main args (\$@) to 'xrun' method. it will check then with ARGS you've defined above\
    \nxrun --xreject-unknow --xrequire-one \"\$@\"\
    \n\
    \n# example of case to check vars defined by xargs/xrun\
    \n# case \"\$action\" in\
    \n#     version) echo -e \"\${VERSION}\" ;;\
    \n#     help)    echo -e \"action:\$action\"; usage ;;\
    \n# esac\
    \n\
    \n# your code below\
    "
}

templateLib(){
    # replace '.' for '_'
    local name=${1//./_}
    # remove word 'lib' from filename
    name=${name//lib/}
    # convert lib name to upercase {^^}
    echo -e  "\n_xLIB_${name^^}_=true\n"
}