#!/usr/bin/env bash
#
# ############################################################################
# Project: shell (none)
# File...: ytinfo
# Created: Sunday, 2020/04/26 - 09:02:28
# Author.: @fbnmtz, (fabiano.matoz@gmail.com) 
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Last Modified: Sunday, 2023/01/01 - 01:04:24
# Modified By..: @fbnmtz, (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Version: 0.1.3.11
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Description: 
#  >
# ############################################################################
# HISTORY:
#


################################################################################
# V2
################################################################################

date_cmd="--dateafter $(date '+%Y%m%d')"
ARGS=""
OUTPUT=""

command="youtube-dl"

################################################################################
# DEFINE YOUTUBE-DL DEFAULT OPTIONS
################################################################################
    # -i: ignore errors (ex: unavailable videos)
    # --skip-download: dont download requested video/playlist in URL. get on info
    # -o: define output format (values and format/order) 
    # -j: convert output format to json
    # -4: force to use ipv4
    # --geo-bypass: avoid geo restrictions for videos
    # --write-description: get video description
DEFAULT_ARGS="-i --skip-download \
              -o '%(uploader)s:%(playlist)s:%(playlist_index)s:%(upload_date)s:%(duration)s:%(id)s:%(title)s' \
              -j \
              -4 \
              "

# return youtube-db command line with default options.Some options may be defined by user
getCMD(){
    while [ "$1" != "" ]; do
        case "$1" in
            -u|--url) 
                URL=$2 ;;
            -a|--after-date) 
                ARGS=$date_cmd ;;
            -s|--simulate) 
                ARGS+=" -s" ;;
            *) 
                DEFAULT_ARGS="--skip-download -o '%(uploader)s:%(playlist)s:%(playlist_index)s:%(upload_date)s:%(duration)s:%(id)s:%(title)s' -j"
        esac
        shift
    done
    # add YT sort format to URL
    CMD="$command $DEFAULT_ARGS $ARGS $URL/videos?view=0&sort=dd&flow=grid"
}

# run command generated by 'getCMD' redirecting output to a json parser (jq)
runCMD(){
    eval "$CMD" | jq '._filename' > /tmp/ytinfo.tmp
    OUTPUT=$(cat /tmp/ytinfo.tmp)
}

# get all videos from a channel url
channel_videos(){
    # DEFAULT_ARGS="--skip-download -o '%(uploader)s:%(playlist)s:%(playlist_index)s:%(upload_date)s:%(duration)s:%(id)s:%(title)s' -j"
    getCMD
    runCMD
    format_output
}

# filter channel videos after a date. ()
videos_date(){
    dt=$1
    ARGS="--dateafter $(date '+%Y%m%d' --date="$dt-1 day")"
    getCMD
    runCMD
    format_output
}

format_output(){
    if [ "$OUTPUT" != "" ]; then 
        echo "# updated=$(date '+%Y%m%d') @$URL"
        while IFS=':' read channel playlist index date duration id title; do
            # `channel` and `title` returned with two invalid chars (") at begin/end. so lets remove then 
            title=${title:0:-1}
            channel=${channel:1}
            echo "https://youtu.be/$id # $channel:$playlist:$index:$date:$duration:$title"
        done <<< $OUTPUT
    else
        echo "null"
    fi
}

# get all playlists from a channel url
channel_playlists(){
    URL+="/playlists"
    getCMD --simulate
    runCMD
    echo "# updated=$(date '+%Y%m%d') @$URL"
    while IFS=':' read channel playlist index date duration id title; do
        echo "https://youtu.be/$id # $(echo $channel | sed 's,'\"\'','','):$playlist:$index:$date:$duration:$(echo $title | sed 's,'\'\"','',')"
    done <<< $OUTPUT
}

channel_name(){
    ARGS="--dateafter $(date '+%Y%m%d' --date='-2 weeks')"
    getCMD
    runCMD
    echo <<< $OUTPUT 
}

# main app
APP=$(basename $0)
usage(){
    echo "usage: $APP [command] [options]"
    echo -e " * commands: 
 describe here your commands/options"
}
requireARGS(){
    if [ "$1" == "" ]; then
        usage
        exit 1
    fi
}

# check all params
while [ "$1" != "" ]; do
    case $1 in
        -cv | --channel-videos) 
            shift
            URL=$1
            channel_videos ;;
        -vd | --videos-date) 
            shift
            dt=$1
            shift
            URL=$1
            videos_date $dt ;;
        -cp | --channel-playlists)
            shift
            URL=$1
            channel_playlists;;
            
        -cn | --channel-name)
            shift
            URL=$1
            channel_name ;;
        *)
            usage
            exit 1
    esac
    # remove current $1 arg, and assing $2 to $1
    shift
done

exit
